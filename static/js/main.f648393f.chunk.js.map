{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","console","log","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f648393f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square (props) {\r\n    return (\r\n        <button \r\n            className=\"square\" \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n} /* создает отдельные кнопки */\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return <Square \r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n} /* создает поле кнопок для игры */\r\n\r\nclass Game extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        }\r\n    }\r\n\r\n    handleClick (i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        console.log(squares);\r\n\r\n        if (calculateWinner(squares) || squares[i]) {\r\n          return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O'; /* важно для чередования х и о */\r\n\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n           stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0, /* проверка на четное число, остаток от деления должен быть равен 0 */\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start'; /* первая кнопка отвечает за чистое состояние доски, каждое нажатие создает ход */\r\n            return (\r\n                <li className='history-li'>\r\n                  <button key={move} onClick={() => this.jumpTo(move)} className='history-btn'>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n           status = `Winner: Player (${winner})`;\r\n        } else {\r\n           status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        if (this.state.stepNumber === 9 && !winner) {\r\n          status = 'No moves!';\r\n        }\r\n        \r\n        return (\r\n            <div className=\"game\">\r\n                <h1>Tic Tac Toe!</h1>\r\n                  <div className='game-area'>\r\n                      <div className=\"game-board\">\r\n                          <Board \r\n                              squares={current.squares}\r\n                              onClick={(i) => this.handleClick(i)}\r\n                          />\r\n                      </div>\r\n                      <div className=\"game-info\">\r\n                          <div className='status'>{status}</div>\r\n                          <ol>{moves}</ol>\r\n                      </div>\r\n                  </div>\r\n            </div>\r\n        );\r\n    }\r\n} /* создает общее пространство игры */\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n} /* проверка победителя */\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}